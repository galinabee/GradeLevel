#!/usr/bin/env node

/**
 * Usage: musicjson [options] <file>
 * If no <file> is given, default to stdin
 *
 * Options:
 *
 *   -h, --help                   output usage information
 *   -V, --version                output the version number
 *   -j, --json                   convert file to MusicJSON
 *   -x, --xml                    convert file to MusicXML
 *   -i, --indent [level=2]       indent the output nicely
 *   -o, --order [preserve=true]  should we preserve tag order?
 */

var fs        = require('fs')
  , program   = require('commander')
  , pkg       = require('../package.json')
  , MusicJSON = require('../index.js')
  , source, preserve, indent, converted;

function times(string, times) {
  return Array(times + 1).join(string);
}

function formatXML(str, indentlvl) {
  str = str.replace(/(>)(<)(\/*)/g, '$1\n$2$3');

  var xml = '', pad = 0, i, length, indent, node,
      lines = str.split('\n'), indentlvl = indentlvl || 2;

  for (i = 0, length = lines.length; i < length; i++) {
    indent = 0;
    node = lines[i];

    if(node.match(/.+<\/\w[^>]*>$/)) {
      indent = 0;
    } else if (node.match(/^<\/\w/) && pad > 0) {
      pad = pad - 1;
    } else if (node.match(/^<\w[^>]*[^\/]>.*$/)) {
      indent = 1;
    } else {
      indent = 0;
    }

    xml = xml + times(' ', pad * indentlvl) + node + '\n';
    pad = pad + indent;
  }

  return xml;
}

function fail(message, err) {
  console.error(message);
  console.error(err.message);
  process.exit(1);
}


// Command line interface
program
  .version(pkg.version)
  .usage('[options] <file>\n  If no <file> is given, default to stdin')
  .option('-j, --json', 'convert file to MusicJSON')
  .option('-x, --xml', 'convert file to MusicXML')
  .option('-i, --indent [level=2]', 'indent the output nicely')
  .option('-o, --order [preserve=true]', 'should we preserve tag order?')
  .parse(process.argv);

source = program.args[0];
preserve = program.order !== 'false';

function input(file, cb) {
  var stream = file ? fs.createReadStream(file) : process.stdin;
  var buffered = '';
  stream.resume();
  stream.setEncoding('utf8');

  stream.on('data', function(chunk) {
    buffered += chunk;
  });

  stream.on('error', function(e) {
    cb(e);
  });

  stream.on('end', function() {
    cb(null, buffered);
  });
}

if (!program.json && !program.xml) {
  program.help();
} else {
  input(source, function(err, data) {
    err && fail('Failed to read from source', err);
    if (program.json) {
      MusicJSON.musicJSON({ source: data, preserveOrder: preserve },
      function(err, output) {
        err && fail('An error occured converting to MusicJSON:', err);

        indent = 'indent' in program ? (+program.indent || 2) : 0;
        converted = JSON.stringify(output, null, times(' ', indent));
        console.log(converted);
      });
    } else {
      try {
        data = JSON.parse(data);
      } catch(err) {
        fail('Invalid MusicJSON source', err);
      }

      MusicJSON.musicXML(data, function(err, root) {
        err && fail('An error occured converting to MusicXML:', err);

        if (program.indent) {
          indent = {
            pretty: true,
            indent: times(' ', +program.indent || 2),
            newline: '\n'
          }
        }

        converted = root.end(indent);
        console.log(converted);
      });
    }
  });
}

