// node Toscanini.spec.js to run this test - simple as that!
// ...but if you want pretty output use npm run test or npm t
"use strict";var cov_259l78nd1p=function(){var path="/Users/galina/Documents/virginia-tech/year3summer/Toscanini/API/Toscanini.spec.js",hash="a7bf26f1801d6a78eee9ec0c3a4731bfcee2763a",global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/galina/Documents/virginia-tech/year3summer/Toscanini/API/Toscanini.spec.js",statementMap:{"0":{start:{line:4,column:11},end:{line:4,column:24}},"1":{start:{line:5,column:13},end:{line:5,column:33}},"2":{start:{line:6,column:18},end:{line:6,column:40}},"3":{start:{line:88,column:0},end:{line:100,column:3}},"4":{start:{line:90,column:19},end:{line:90,column:70}},"5":{start:{line:91,column:20},end:{line:91,column:39}},"6":{start:{line:94,column:19},end:{line:94,column:50}},"7":{start:{line:95,column:21},end:{line:95,column:23}},"8":{start:{line:96,column:4},end:{line:96,column:63}},"9":{start:{line:99,column:2},end:{line:99,column:10}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:88,column:18},end:{line:88,column:19}},loc:{start:{line:89,column:0},end:{line:100,column:1}},line:89}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},f:{"0":0},b:{},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const fs=(++cov_259l78nd1p.s[0],require("fs"));const test=(++cov_259l78nd1p.s[1],require("tape").test);const Toscanini=(++cov_259l78nd1p.s[2],require("./Toscanini"));//
// test("ava_maria_pg1 tests", (t) =>
// {
//   const musicXML = fs.readFileSync("./scores/ava_maria_pg1.xml");
//   const toscanini =  Toscanini(musicXML);
//
//   {
//     const range = toscanini.getPitchRange();
//     const actualMin = range["minPitch"];
//     const actualMax = range["maxPitch"];
//     const expectedMin = 15; //Eb
//     const expectedMax = 68;
//     t.deepEqual(actualMin, expectedMin, "getPitchRange min");
//     t.deepEqual(actualMax, expectedMax, "getPitchRange max");
//   }
//
//   {
//     const actual = toscanini.getInstrumentNames();
//     const expected = [ "Voice", "Piano" ];
//     t.deepEqual(actual, expected, "getInstrumentNames");
//   }
//
//   {
//     const actual = toscanini.getPitchRange("Voice")["minPitch"];
//     const expected = 53; //F
//     t.deepEqual(actual, expected, "getPitchRange Voice min");
//   }
//
//   {
//     const actual = toscanini.getPitchRange("Voice")["maxPitch"];
//     const expected = 65; //F
//     t.deepEqual(actual, expected, "getPitchRange Voice max");
//   }
//
//   {
//     const actual = ["Bb"];
//     const expected = toscanini.getKeySignatures();
//     t.deepEqual(actual, expected, "getKeySignatures");
//   }
//
//   t.end();
// });
//
// test("basic", (t) =>
// {
//   const musicxml = fs.readFileSync("./scores/basic.xml");
//   const toscanini = Toscanini(musicxml);
//
//   {
//     const actual = toscanini.getValsByTagName("octave");
//     const expected = ["4", "4", "5"];
//     t.deepEqual(actual, expected, "getValsByTagName");
//   }
//   t.end();
// });
//
// test("dynamics_test test", (t) =>
// {
//   const musicXML = fs.readFileSync("./scores/dynamics_test.xml");
//   const toscanini =  Toscanini(musicXML);
//
//   {
//     const actual = ["pp", "f", "mp", "ff", "mf"];
//     const expected = toscanini.getDynamics();
//     t.deepEqual(actual, expected, "getDynamics score");
//   }
//
//   {
//     const actual = ["pp", "f", "mp"];
//     const expected = toscanini.getDynamics("Violin");
//     t.deepEqual(actual, expected, "getDynamics Violin");
//   }
//
//   {
//     const actual = ["ff", "f", "mf"];
//     const expected = toscanini.getDynamics("Violoncello");
//     t.deepEqual(actual, expected, "getDynamics Violoncello");
//   }
//
//   t.end();
// });
++cov_259l78nd1p.s[3];test("two_parts",t=>{++cov_259l78nd1p.f[0];const musicXML=(++cov_259l78nd1p.s[4],fs.readFileSync("./scores/rhythmic_complexity.xml"));const toscanini=(++cov_259l78nd1p.s[5],Toscanini(musicXML));{const actual=(++cov_259l78nd1p.s[6],toscanini.getRhythmComplexity());const expected=(++cov_259l78nd1p.s[7],[]);++cov_259l78nd1p.s[8];t.deepEqual(actual,expected,"getRhythmComplexity score");}++cov_259l78nd1p.s[9];t.end();});// test("two_parts", (t) =>
// {
//   const musicXML = fs.readFileSync("./scores/two_parts.xml");
//   const toscanini = Toscanini(musicXML);
//
//   {
//     const actual = toscanini.getInstrumentsWithMelody("BGBC");
//     const expected = ["Violin"];
//     t.deepEqual(actual, expected, "getInstrumentsWithMelody");
//   }
//
//   {
//     const actual = toscanini.getInstrumentsWithMelody("GD");
//     const expected = ["Flute"];
//     t.deepEqual(actual, expected, "getInstrumentsWithMelody");
//   }
//
//   {
//     const actual = toscanini.getRhythmComplexity();
//     const expected = [];
//     t.deepEqual(actual, expected, "getRhythmComplexity score");
//   }
//
//   t.end();
// });
//
// test("two_tempos", (t) =>
// {
//   const musicXML = fs.readFileSync("./scores/two_tempos.xml");
//   const toscanini =  Toscanini(musicXML);
//
//   {
//     const actual = toscanini.getTempos();
//     const expected = [105, 90];
//     t.deepEqual(actual, expected, "getTempos");
//   }
//
//   { //confirms for single instrument we can use the same queries
//     const actual = toscanini.getPitchRange("Flute")["minPitch"];
//     const expected = toscanini.getPitchRange()["minPitch"];
//     t.deepEqual(actual, expected, "getTempos");
//   }
//
//   t.end();
// });
//
// test("two_time_signatures", (t) =>
// {
//   const musicxml = fs.readFileSync("./scores/time_signature_change.xml");
//   const toscanini = Toscanini(musicxml);
//
//   {
//     const actual = toscanini.getTimeSignatures();
//     const expected = [[4,4], [9,8]];
//     t.deepEqual(actual, expected, "getTimeSignatures");
//   }
//
//   t.end();
// });
//
// test("vivaldi_winter tests", (t) =>
// {
//   const musicXML = fs.readFileSync("./scores/vivaldi_winter.xml");
//   const toscanini =  Toscanini(musicXML);
//
//   {
//     const actual = toscanini.getInstrumentNames();
//     const expected =[ "Solo Violin", "Violin I",
//                       "Violin II", "Viola", "Violoncello",
//                       "Contrabass", "Harpsichord" ];
//     t.deepEqual(actual, expected, "getInstrumentNames");
//   }
//
//   {
//     const actual = toscanini.getPitchRange("Viola")["maxPitch"];
//     const expected = 62; //D5
//     t.deepEqual(actual, expected, "getPitchRange Viola max");
//   }
//
//   {
//     const actual = toscanini.getPitchRange("Solo Violin")["maxPitch"];
//     const expected = 79; //G6
//     t.deepEqual(actual, expected, "getPitchRange Solo Violin max");
//   }
//
//   {
//     const actual = ["Ab", "Eb"];
//     const expected = toscanini.getKeySignatures("Violin I");
//     t.deepEqual(actual, expected, "getKeySignatures Violin I");
//   }
//
//   {
//     const actual = ["Ab", "Eb"];
//     const expected = toscanini.getKeySignatures();
//     t.deepEqual(actual, expected, "getKeySignatures score");
//   }
//
//   {
//     const actual = [[4, 4], [3, 8]];
//     const expected = toscanini.getTimeSignatures("Violin I");
//     t.deepEqual(actual, expected, "getTimeSignatures Violin I");
//   }
//
//   {
//     const actual = [[4, 4], [3, 8]];
//     const expected = toscanini.getTimeSignatures();
//     t.deepEqual(actual, expected, "getTimeSignatures score");
//   }
//
//   {
//     const actual = [68, 60, 33, 78, 45, 40];
//     const expected = toscanini.getTempos("Viola");
//     t.deepEqual(actual, expected, "getTempos Viola");
//   }
//
//   {
//     const actual = [68, 60, 33, 78, 45, 40];
//     const expected = toscanini.getTempos();
//     t.deepEqual(actual, expected, "getTempos score");
//   }
//
//   t.end();
// });